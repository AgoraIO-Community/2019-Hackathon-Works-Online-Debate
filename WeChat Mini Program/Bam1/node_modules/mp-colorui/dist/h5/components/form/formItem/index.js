import Nerv from "nervjs";
import Taro from "@tarojs/taro-h5";
import { View } from '@tarojs/components';
// import { FormContext } from '../index'
import defaultRules from '../../utils/rules';
import context from '../context';
import './index.scss';
export default class ClFormItem extends Taro.Component {
  render() {
    const [tip, setTip] = Taro.useState('');
    const [err, setErr] = Taro.useState(false);
    const [firstInit, setFirstInit] = Taro.useState(true);
    const [flag, setFlag] = Taro.useState(true);
    const [message, setMessage] = Taro.useState('');
    const { prop, required } = this.props;
    const modelData = context.inject('model') || {};
    const rulesData = context.inject('rules') || {};
    const value = modelData[prop || ''] || '';
    const ruleFunc = rulesData[prop || ''] || function () {
      return true;
    };
    // let message = ''
    const callback = (str = '') => {
      setMessage(str);
      // message = str
    };
    // let flag = true;
    Taro.useEffect(() => {
      if (firstInit) setFirstInit(false);
    }, []);
    Taro.useEffect(() => {
      setFlag(firstInit ? true : ruleFunc(defaultRules, value, callback));
    }, [modelData]);
    Taro.useEffect(() => {
      setErr(!flag);
    }, [flag]);
    Taro.useEffect(() => {
      setTip(message);
    }, [message]);
    return <View className={err ? 'cu-formItem-err' : 'cu-formItem'}>
        {this.props.children}
        {err ? <View className="cu-formItem-err-tip">
            {tip}
          </View> : ''}
        {required ? <View className="cu-formItem-required" /> : ''}
      </View>;
  }
}
// static contextType = FormContext
ClFormItem.defaultProps = {
  prop: '',
  required: false
};