import Nerv from "nervjs";

var _this = this;

import { Image, Input, View } from '@tarojs/components';
import Taro, { createSelectorQuery as _createSelectorQuery } from "@tarojs/taro-h5";
import ClButton from "../button/index";
import ClIcon from '../icon/index';
import './index.scss';
import { screenPercent } from "../utils/index";

class ClInput extends Taro.Component {
  render() {
    const props = this.props;

    const [focus, setFocus] = Taro.useState(false);
    const [normalType, setNormalType] = Taro.useState();
    const [tempInput, setTempInput] = Taro.useState('');
    const [initValue, setInitValue] = Taro.useState(props.value);
    const [inputId, setInputId] = Taro.useState(`cl-input-${+new Date()}`);
    const [materialWidth, setMaterialWidth] = Taro.useState('0px');
    const isH5 = Taro.ENV_TYPE.WEB === Taro.getEnv();
    const onChange = event => {
      let input = event.detail.value;
      setInitValue(input);
      if (props.type === 'number') {
        if (Taro.ENV_TYPE.WEB === Taro.getEnv()) {
          if (!isNaN(event.data - 0)) {
            if (event.data === null) {
              input = tempInput.slice(0, tempInput.length - 1);
            } else {
              input = tempInput + parseInt(`${event.data - 0}`);
            }
          } else {
            input = tempInput;
          }
          setTempInput(input);
          setTimeout(() => {
            setInitValue(input);
          });
        } else {
          input = !isNaN(event.detail.value - 0) ? event.detail.value : null;
          if (input !== null) {
            setTempInput(input);
            setInitValue(input);
          } else {
            setTimeout(() => {
              setInitValue(tempInput);
            });
          }
        }
      } else {
        setInitValue(input);
      }
      props.onChange && props.onChange(input);
    };
    const onBlur = event => {
      setFocus(false);
      props.onBlur && props.onBlur(event.detail.value);
    };
    const onFocus = event => {
      setFocus(true);
      props.onFocus && props.onFocus(event.detail.value);
    };
    const onIconClick = event => {
      props.onIconClick && props.onIconClick(event);
    };
    const onImageClick = event => {
      props.onImageClick && props.onImageClick(event);
    };
    if (props.type !== 'password') {
      if (props.type !== normalType) {
        setNormalType(props.type);
      }
    }
    const iconComponent = props.icon ? <View onClick={onIconClick}>
      <ClIcon {...props.icon} />
    </View> : '';
    const buttonComponent = props.button ? <ClButton {...props.button} /> : '';
    const imageComponent = props.image ? <View onClick={onImageClick} style={{}}>
      <Image src={props.image || ''} mode="aspectFit" style={{
        maxWidth: Taro.pxTransform(100),
        maxHeight: Taro.pxTransform(100)
      }} />
    </View> : '';
    let { title, placeholder, value, adjustPosition, type, maxLength, disabled, renderCustomRight } = props;
    let titleWidth = props.titleWidth === 'auto' ? 'auto' : Taro.pxTransform(props.titleWidth || 200);
    Taro.useEffect(() => {
      setInitValue(value);
    }, [props.value]);
    Taro.useEffect(() => {
      if (isH5) {
        const content = document.querySelector(`#${inputId}`);
        const width = content.clientWidth;
        setMaterialWidth(Taro.pxTransform(width / screenPercent));
      } else {
        const query = _createSelectorQuery().in(this.$scope);
        query.select('#cl-input').fields({
          size: true
        }, res => {
          setMaterialWidth(Taro.pxTransform(res.width / screenPercent));
        }).exec();
      }
    }, [props.title]);
    const renderMaterialTitle = <View className={`${focus || initValue ? 'materialFocus' : 'materialBlur'}`} style={{ width: titleWidth }} id="cl-input">{title}</View>;
    const renderMaterialTitle_H5 = <View className={`${focus || initValue ? 'materialFocus' : 'materialBlur'}`} style={{ width: titleWidth }} id={inputId}>{title}</View>;
    const normalTitle = <View className="title" style={{ width: titleWidth }}>{title}</View>;
    return <View className={`cu-form-group ${focus ? 'focus' : 'blur'}`} style={{ position: 'relative' }}>
      {title && props.pattern === 'normal' ? normalTitle : ''}
      {title && props.pattern === 'material' ? isH5 ? renderMaterialTitle_H5 : renderMaterialTitle : ''}
      <Input placeholder={placeholder} value={initValue} onInput={onChange} onBlur={onBlur} onFocus={onFocus} adjustPosition={adjustPosition} type={normalType} password={type === 'password'} maxLength={maxLength || -1} disabled={disabled} style={{ textAlign: props.align, paddingLeft: `${props.pattern === 'material' && !(focus || initValue) ? materialWidth : 0}` }} />
      {iconComponent}
      {buttonComponent}
      {imageComponent}
      {renderCustomRight}
    </View>;
  }

}

ClInput.options = {
  addGlobalClass: true
};
ClInput.defaultProps = {
  titleWidth: 'auto',
  align: 'left',
  pattern: 'normal',
  value: undefined,
  placeholder: '',
  type: 'text',
  adjustPosition: true
};
export default ClInput;